{
  "log": {
    "_recordingName": "Does not cache mutations",
    "creator": {
      "comment": "persister:fs",
      "name": "Polly.JS",
      "version": "4.3.0"
    },
    "entries": [
      {
        "_id": "4ef5c8c8c06cee582ba1ba03100848c7",
        "_order": 0,
        "cache": {},
        "request": {
          "bodySize": 359,
          "cookies": [],
          "headers": [
            {
              "_fromType": "array",
              "name": "accept",
              "value": "*/*"
            },
            {
              "_fromType": "array",
              "name": "content-type",
              "value": "application/json"
            },
            {
              "_fromType": "array",
              "name": "content-length",
              "value": "359"
            },
            {
              "_fromType": "array",
              "name": "user-agent",
              "value": "node-fetch/1.0 (+https://github.com/bitinn/node-fetch)"
            },
            {
              "_fromType": "array",
              "name": "accept-encoding",
              "value": "gzip,deflate"
            },
            {
              "_fromType": "array",
              "name": "connection",
              "value": "close"
            },
            {
              "name": "host",
              "value": "localhost:8000"
            }
          ],
          "headersSize": 254,
          "httpVersion": "HTTP/1.1",
          "method": "POST",
          "postData": {
            "mimeType": "application/json",
            "params": [],
            "text": "[{\"operationName\":\"PasswordChange\",\"variables\":{\"newPassword\":\"admin12345678\",\"oldPassword\":\"admin12345678\"},\"query\":\"mutation PasswordChange($newPassword: String!, $oldPassword: String!) {\\n  passwordChange(newPassword: $newPassword, oldPassword: $oldPassword) {\\n    errors {\\n      field\\n      message\\n      __typename\\n    }\\n    __typename\\n  }\\n}\\n\"}]"
          },
          "queryString": [],
          "url": "http://localhost:8000/graphql/"
        },
        "response": {
          "bodySize": 1027,
          "content": {
            "mimeType": "application/json",
            "size": 1027,
            "text": "[{\"errors\": [{\"message\": \"You do not have permission to perform this action\", \"locations\": [{\"line\": 2, \"column\": 3}], \"path\": [\"passwordChange\"], \"extensions\": {\"exception\": {\"code\": \"PermissionDenied\", \"stacktrace\": [\"Traceback (most recent call last):\", \"  File \\\"/Users/anders/.pyenv/versions/saleor/lib/python3.8/site-packages/promise/promise.py\\\", line 489, in _resolve_from_executor\", \"    executor(resolve, reject)\", \"  File \\\"/Users/anders/.pyenv/versions/saleor/lib/python3.8/site-packages/promise/promise.py\\\", line 756, in executor\", \"    return resolve(f(*args, **kwargs))\", \"  File \\\"/Users/anders/.pyenv/versions/saleor/lib/python3.8/site-packages/graphql/execution/middleware.py\\\", line 75, in make_it_promise\", \"    return next(*args, **kwargs)\", \"  File \\\"/Users/anders/projects/saleor/saleor/graphql/core/mutations.py\\\", line 272, in mutate\", \"    raise PermissionDenied()\", \"saleor.core.exceptions.PermissionDenied: You do not have permission to perform this action\"]}}}], \"data\": {\"passwordChange\": null}}]"
          },
          "cookies": [],
          "headers": [
            {
              "name": "date",
              "value": "Mon, 29 Jun 2020 10:30:51 GMT"
            },
            {
              "name": "server",
              "value": "WSGIServer/0.2 CPython/3.8.1"
            },
            {
              "name": "content-type",
              "value": "application/json"
            },
            {
              "name": "access-control-allow-origin",
              "value": "*"
            },
            {
              "name": "access-control-allow-methods",
              "value": "POST, OPTIONS"
            },
            {
              "name": "access-control-allow-headers",
              "value": "Origin, Content-Type, Accept, Authorization"
            },
            {
              "name": "content-length",
              "value": "1027"
            },
            {
              "name": "x-content-type-options",
              "value": "nosniff"
            }
          ],
          "headersSize": 316,
          "httpVersion": "HTTP/1.1",
          "redirectURL": "",
          "status": 200,
          "statusText": "OK"
        },
        "startedDateTime": "2020-06-29T10:30:51.869Z",
        "time": 13,
        "timings": {
          "blocked": -1,
          "connect": -1,
          "dns": -1,
          "receive": 0,
          "send": 0,
          "ssl": -1,
          "wait": 13
        }
      },
      {
        "_id": "90275a318dd9400af2e2ebe5cbf0e09b",
        "_order": 0,
        "cache": {},
        "request": {
          "bodySize": 962,
          "cookies": [],
          "headers": [
            {
              "_fromType": "array",
              "name": "accept",
              "value": "*/*"
            },
            {
              "_fromType": "array",
              "name": "content-type",
              "value": "application/json"
            },
            {
              "_fromType": "array",
              "name": "content-length",
              "value": "962"
            },
            {
              "_fromType": "array",
              "name": "user-agent",
              "value": "node-fetch/1.0 (+https://github.com/bitinn/node-fetch)"
            },
            {
              "_fromType": "array",
              "name": "accept-encoding",
              "value": "gzip,deflate"
            },
            {
              "_fromType": "array",
              "name": "connection",
              "value": "close"
            },
            {
              "name": "host",
              "value": "localhost:8000"
            }
          ],
          "headersSize": 254,
          "httpVersion": "HTTP/1.1",
          "method": "POST",
          "postData": {
            "mimeType": "application/json",
            "params": [],
            "text": "[{\"operationName\":\"TokenAuth\",\"variables\":{\"email\":\"admin@example.com\",\"password\":\"admin\"},\"query\":\"fragment Address on Address {\\n  id\\n  firstName\\n  lastName\\n  companyName\\n  streetAddress1\\n  streetAddress2\\n  city\\n  postalCode\\n  country {\\n    code\\n    country\\n    __typename\\n  }\\n  countryArea\\n  phone\\n  isDefaultBillingAddress\\n  isDefaultShippingAddress\\n  __typename\\n}\\n\\nfragment User on User {\\n  id\\n  email\\n  firstName\\n  lastName\\n  isStaff\\n  defaultShippingAddress {\\n    ...Address\\n    __typename\\n  }\\n  defaultBillingAddress {\\n    ...Address\\n    __typename\\n  }\\n  addresses {\\n    ...Address\\n    __typename\\n  }\\n  __typename\\n}\\n\\nmutation TokenAuth($email: String!, $password: String!) {\\n  tokenCreate(email: $email, password: $password) {\\n    token\\n    errors: accountErrors {\\n      code\\n      field\\n      message\\n      __typename\\n    }\\n    user {\\n      ...User\\n      __typename\\n    }\\n    __typename\\n  }\\n}\\n\"}]"
          },
          "queryString": [],
          "url": "http://localhost:8000/graphql/"
        },
        "response": {
          "bodySize": 1856,
          "content": {
            "mimeType": "application/json",
            "size": 1856,
            "text": "[{\"data\": {\"tokenCreate\": {\"token\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpYXQiOjE1OTQxMjQ4MjQsImV4cCI6MTU5NDEyNTEyNCwidG9rZW4iOiJhc21wb0hMT01mcGUiLCJlbWFpbCI6ImFkbWluQGV4YW1wbGUuY29tIiwidHlwZSI6ImFjY2VzcyIsInVzZXJfaWQiOiJWWE5sY2pveU5BPT0iLCJpc19zdGFmZiI6dHJ1ZX0.ICtGJ5ksqngoC9UhEBwYCymC60re7B3TZuQ7AQT2RHA\", \"errors\": [], \"user\": {\"id\": \"VXNlcjoyNA==\", \"email\": \"admin@example.com\", \"firstName\": \"\", \"lastName\": \"\", \"isStaff\": true, \"defaultShippingAddress\": {\"id\": \"QWRkcmVzczozOQ==\", \"firstName\": \"John\", \"lastName\": \"Nowak\", \"companyName\": \"Mirumee\", \"streetAddress1\": \"166 Morgan Street\", \"streetAddress2\": \"Another Street 12\", \"city\": \"BERLIN\", \"postalCode\": \"14-506\", \"country\": {\"code\": \"AL\", \"country\": \"Albania\", \"__typename\": \"CountryDisplay\"}, \"countryArea\": \"\", \"phone\": \"+48123000678\", \"isDefaultBillingAddress\": null, \"isDefaultShippingAddress\": null, \"__typename\": \"Address\"}, \"defaultBillingAddress\": {\"id\": \"QWRkcmVzczozOQ==\", \"firstName\": \"John\", \"lastName\": \"Nowak\", \"companyName\": \"Mirumee\", \"streetAddress1\": \"166 Morgan Street\", \"streetAddress2\": \"Another Street 12\", \"city\": \"BERLIN\", \"postalCode\": \"14-506\", \"country\": {\"code\": \"AL\", \"country\": \"Albania\", \"__typename\": \"CountryDisplay\"}, \"countryArea\": \"\", \"phone\": \"+48123000678\", \"isDefaultBillingAddress\": null, \"isDefaultShippingAddress\": null, \"__typename\": \"Address\"}, \"addresses\": [{\"id\": \"QWRkcmVzczozOQ==\", \"firstName\": \"John\", \"lastName\": \"Nowak\", \"companyName\": \"Mirumee\", \"streetAddress1\": \"166 Morgan Street\", \"streetAddress2\": \"Another Street 12\", \"city\": \"BERLIN\", \"postalCode\": \"14-506\", \"country\": {\"code\": \"AL\", \"country\": \"Albania\", \"__typename\": \"CountryDisplay\"}, \"countryArea\": \"\", \"phone\": \"+48123000678\", \"isDefaultBillingAddress\": true, \"isDefaultShippingAddress\": true, \"__typename\": \"Address\"}], \"__typename\": \"User\"}, \"__typename\": \"CreateToken\"}}}]"
          },
          "cookies": [
            {
              "httpOnly": true,
              "name": "refreshToken",
              "path": "/",
              "secure": true,
              "value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpYXQiOjE1OTQxMjQ4MjQsImV4cCI6MTU5NjcxNjgyNCwidG9rZW4iOiJhc21wb0hMT01mcGUiLCJlbWFpbCI6ImFkbWluQGV4YW1wbGUuY29tIiwidHlwZSI6InJlZnJlc2giLCJ1c2VyX2lkIjoiVlhObGNqb3lOQT09IiwiaXNfc3RhZmYiOnRydWUsImNzcmZUb2tlbiI6InBnZmNYaHBVMENRWlNVUVJuMXkwbWh4OEhWN1pscXNXeUNyVjVDQ2ZVUFA4d3NjTjNuTFpPZVpubzZmOHg2TlMifQ.W0QwzyGklkjHsMSBnopk-McMlDzwreNIhJkwlwIiL2A"
            }
          ],
          "headers": [
            {
              "name": "date",
              "value": "Tue, 07 Jul 2020 12:27:04 GMT"
            },
            {
              "name": "server",
              "value": "WSGIServer/0.2 CPython/3.8.3"
            },
            {
              "name": "content-type",
              "value": "application/json"
            },
            {
              "name": "access-control-allow-origin",
              "value": "*"
            },
            {
              "name": "access-control-allow-methods",
              "value": "POST, OPTIONS"
            },
            {
              "name": "access-control-allow-headers",
              "value": "Origin, Content-Type, Accept, Authorization"
            },
            {
              "name": "content-length",
              "value": "1856"
            },
            {
              "name": "x-content-type-options",
              "value": "nosniff"
            },
            {
              "_fromType": "array",
              "name": "set-cookie",
              "value": "refreshToken=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpYXQiOjE1OTQxMjQ4MjQsImV4cCI6MTU5NjcxNjgyNCwidG9rZW4iOiJhc21wb0hMT01mcGUiLCJlbWFpbCI6ImFkbWluQGV4YW1wbGUuY29tIiwidHlwZSI6InJlZnJlc2giLCJ1c2VyX2lkIjoiVlhObGNqb3lOQT09IiwiaXNfc3RhZmYiOnRydWUsImNzcmZUb2tlbiI6InBnZmNYaHBVMENRWlNVUVJuMXkwbWh4OEhWN1pscXNXeUNyVjVDQ2ZVUFA4d3NjTjNuTFpPZVpubzZmOHg2TlMifQ.W0QwzyGklkjHsMSBnopk-McMlDzwreNIhJkwlwIiL2A; HttpOnly; Path=/; Secure"
            }
          ],
          "headersSize": 748,
          "httpVersion": "HTTP/1.1",
          "redirectURL": "",
          "status": 200,
          "statusText": "OK"
        },
        "startedDateTime": "2020-07-07T12:27:04.342Z",
        "time": 118,
        "timings": {
          "blocked": -1,
          "connect": -1,
          "dns": -1,
          "receive": 0,
          "send": 0,
          "ssl": -1,
          "wait": 118
        }
      },
      {
        "_id": "22a855d7a7e1f99ec2a5d0382c07e094",
        "_order": 0,
        "cache": {},
        "request": {
          "bodySize": 1100,
          "cookies": [],
          "headers": [
            {
              "_fromType": "array",
              "name": "accept",
              "value": "*/*"
            },
            {
              "_fromType": "array",
              "name": "content-type",
              "value": "application/json"
            },
            {
              "_fromType": "array",
              "name": "content-length",
              "value": "1100"
            },
            {
              "_fromType": "array",
              "name": "user-agent",
              "value": "node-fetch/1.0 (+https://github.com/bitinn/node-fetch)"
            },
            {
              "_fromType": "array",
              "name": "accept-encoding",
              "value": "gzip,deflate"
            },
            {
              "_fromType": "array",
              "name": "connection",
              "value": "close"
            },
            {
              "name": "host",
              "value": "localhost:8000"
            }
          ],
          "headersSize": 255,
          "httpVersion": "HTTP/1.1",
          "method": "POST",
          "postData": {
            "mimeType": "application/json",
            "params": [],
            "text": "[{\"operationName\":\"SetPassword\",\"variables\":{\"email\":\"admin@example.com\",\"password\":\"admin12345678\",\"token\":\"5hr-73a06b70fd6ad8ab3913\"},\"query\":\"fragment Address on Address {\\n  id\\n  firstName\\n  lastName\\n  companyName\\n  streetAddress1\\n  streetAddress2\\n  city\\n  postalCode\\n  country {\\n    code\\n    country\\n    __typename\\n  }\\n  countryArea\\n  phone\\n  isDefaultBillingAddress\\n  isDefaultShippingAddress\\n  __typename\\n}\\n\\nfragment User on User {\\n  id\\n  email\\n  firstName\\n  lastName\\n  isStaff\\n  defaultShippingAddress {\\n    ...Address\\n    __typename\\n  }\\n  defaultBillingAddress {\\n    ...Address\\n    __typename\\n  }\\n  addresses {\\n    ...Address\\n    __typename\\n  }\\n  __typename\\n}\\n\\nmutation SetPassword($token: String!, $email: String!, $password: String!) {\\n  setPassword(token: $token, email: $email, password: $password) {\\n    errors {\\n      field\\n      message\\n      __typename\\n    }\\n    token\\n    user {\\n      ...User\\n      __typename\\n    }\\n    accountErrors {\\n      field\\n      message\\n      code\\n      __typename\\n    }\\n    __typename\\n  }\\n}\\n\"}]"
          },
          "queryString": [],
          "url": "http://localhost:8000/graphql/"
        },
        "response": {
          "bodySize": 310,
          "content": {
            "mimeType": "application/json",
            "size": 310,
            "text": "[{\"data\": {\"setPassword\": {\"errors\": [{\"field\": \"token\", \"message\": \"Invalid or expired token.\", \"__typename\": \"Error\"}], \"token\": null, \"user\": null, \"accountErrors\": [{\"field\": \"token\", \"message\": \"Invalid or expired token.\", \"code\": \"INVALID\", \"__typename\": \"AccountError\"}], \"__typename\": \"SetPassword\"}}}]"
          },
          "cookies": [],
          "headers": [
            {
              "name": "date",
              "value": "Tue, 07 Jul 2020 12:27:04 GMT"
            },
            {
              "name": "server",
              "value": "WSGIServer/0.2 CPython/3.8.3"
            },
            {
              "name": "content-type",
              "value": "application/json"
            },
            {
              "name": "access-control-allow-origin",
              "value": "*"
            },
            {
              "name": "access-control-allow-methods",
              "value": "POST, OPTIONS"
            },
            {
              "name": "access-control-allow-headers",
              "value": "Origin, Content-Type, Accept, Authorization"
            },
            {
              "name": "content-length",
              "value": "310"
            },
            {
              "name": "x-content-type-options",
              "value": "nosniff"
            }
          ],
          "headersSize": 315,
          "httpVersion": "HTTP/1.1",
          "redirectURL": "",
          "status": 200,
          "statusText": "OK"
        },
        "startedDateTime": "2020-07-07T12:27:04.476Z",
        "time": 21,
        "timings": {
          "blocked": -1,
          "connect": -1,
          "dns": -1,
          "receive": 0,
          "send": 0,
          "ssl": -1,
          "wait": 21
        }
      }
    ],
    "pages": [],
    "version": "1.2"
  }
}
